<?php

namespace app\store\controller;

use app\store\model\User as UserModel;
use app\common\library\dbcenter\User as DBCenterUser;
use app\store\model\UserAddress;
use app\store\model\Order as OrderModel;

/**
 * 用户管理
 * Class User
 * @package app\store\controller
 */
class User extends Controller
{
    /**
     * 用户列表
     * @param string $nickName
     * @param null $gender
     * @return mixed
     * @throws \think\exception\DbException
     */
    public function index()
    {
        return $this->fetch('index');
    }

    /**
     * 删除用户
     * @param $user_id
     * @return array
     * @throws \think\exception\DbException
     */
    public function delete($user_id)
    {
        // 用户详情
        $model = UserModel::detail($user_id, true);
        if ($model->setDelete()) {
            return json($this->renderJson(0, '删除成功', '', []));
        }
        return json($this->renderJson(1, "删除失败", '', []));
    }

    /**
     * 恢复用户
     * @param $user_id
     * @return array
     * @throws \think\exception\DbException
     */
    public function recovery($user_id)
    {
        // 用户详情
        $model = UserModel::detail($user_id, true);
        if ($model->setRecovery()) {
            return json($this->renderJson(0, '恢复成功', '', []));
        }
        return json($this->renderJson(1, "恢复失败", '', []));
    }

    /**
     * 用户充值
     * @param $user_id
     * @return array|bool
     * @throws \think\Exception
     * @throws \think\exception\DbException
     */
    public function recharge($user_id)
    {
        // 用户详情
        $model = UserModel::detail($user_id);
        if ($model->recharge($this->store['user']['user_name'], $this->postData('recharge'))) {
            return $this->renderSuccess('操作成功');
        }
        return $this->renderError($model->getError() ?: '操作失败');
    }

    /**
     *  用户充值（新）
     */
    public function recharged($user_id)
    {
        // 用户详情
        $model = UserModel::detail($user_id);
        if ($model->recharge($this->store['user']['user_name'], $this->request->put())) {
            return json($this->renderJson(0, '操作成功', '', []));
        }
        return json($this->renderJson(1, "操作失败", '', []));
    }

    /**
     * 获取用户id
     */
    private static function _getUserIds($items) {
        $userIds = [];
        if($items) {
            foreach($items as $item) {
                array_push($userIds, $item['user_id']);
            }
        }

        return $userIds;
    }

    /**
     * @param string $keywords
     * @param null $gender
     */
    public function getUserInfo($provinceId, $cityId, $gender, $keywords)
    {
        $model = new UserModel;
        // 根据默认收货地址获取用户
        $userAdress = (new UserAddress)->getUserInfo($provinceId, $cityId, $gender, $keywords);
        $userAdressIds = self::_getUserIds($userAdress);
        $totalIds = $userAdressIds;
        // 获取带经纬度的信息
        $usersLocation = $model->getUserInfoByLocation($provinceId, $cityId, $gender, $keywords, $totalIds);
        $userLocationIds = self::_getUserIds($usersLocation);
        $totalIds = array_merge($userAdressIds, $userLocationIds);
        // 获取微信的用户信息
        $userBase = $model->getUserInfoByBase($provinceId, $cityId, $gender, $keywords, $totalIds);
        $userBaseIds = self::_getUserIds($userBase);
        // 所有用户的ID
        $totalIds = array_merge($userAdressIds, $userLocationIds, $userBaseIds);
        // 合并三个优先级条件所得用户
        $list = array_merge($userAdress, $usersLocation, $userBase);
        $total = count($list);
        // 按user_id进行冒泡排序
        for($i = 0; $i < $total; $i ++){
            for ($j = $i + 1; $j < $total; $j ++){
                if ($list[$i]['user_id'] < $list[$j]['user_id']){
                    $min = $list[$j];
                    $list[$j] = $list[$i];
                    $list[$i] = $min;
                }
            }
        }
        foreach ($list as &$value){
            if (array_key_exists('receiveProvince', $value) == false){
                $value['receiveProvince'] = '';
                $value['receiveCity']     = '';
                $value['receiveRegion']   = '';
                $notFindUser['receiveDetail']  = '';
                $value['receiveName']     = '';
                $value['receiveMobile']   = '';
            }
        }
        if($totalIds) {
            // 获取贡献和分红
            $items = (new DBCenterUser)->getUserInfo($totalIds);
            foreach($list as &$li) {
                $li['bonus']        = 0;
                $li['contribution'] = 0;
                $li['totalContribution'] = 0;
                $li['withdraw'] = 0;
                if($items) {
                    foreach($items as $item) {
                        if($item['userCode'] == $li['user_id']) {
                            $li['bonus']        = isset($item['totalHistoryDividend']) ? $item['totalHistoryDividend'] : 0;
                            $li['contribution'] = $item['totalContribution'];
                            $li['totalContribution'] = $item['totalHistoryContribution'];
                            $li['totalDividend'] = $item['totalDividend'];
                            $li['withdraw']          = isset($item['cash']) ? $item['cash'] : 0;
                        }
                    }
                }
            }
        }
        return json($this->renderJson(0, "", '', $list));
    }
}
