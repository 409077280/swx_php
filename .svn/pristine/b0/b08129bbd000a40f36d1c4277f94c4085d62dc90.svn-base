<?php

namespace app\api\controller\user;

use app\api\controller\Controller;

use app\api\model\Order as OrderModel;
use app\api\model\Wxapp as WxappModel;
use app\api\model\WxappPrepayId as WxappPrepayIdModel;
use app\common\library\wechat\WxPay;
use app\common\service\qrcode\Extract as ExtractQRcode;
use app\common\enum\OrderType as OrderTypeEnum;
use app\common\enum\order\PayType as PayTypeEnum;
use app\api\model\Express as ExpressModel;

/**
 * 用户订单管理
 * Class Order
 * @package app\api\controller\user
 */
class Order extends Controller
{
    /* @var \app\api\model\User $user */
    private $user;

    /**
     * 构造方法
     * @throws \app\common\exception\BaseException
     * @throws \think\exception\DbException
     */
    public function _initialize()
    {
        parent::_initialize();
        $this->user = $this->getUser();   // 用户信息
    }

    /**
     * 我的订单列表
     * @param $dataType
     * @return array
     * @throws \think\exception\DbException
     */
    public function lists($dataType)
    {
        $model = new OrderModel;
        $list = $model->getList($this->user['user_id'], $dataType);
        return $this->renderSuccess(compact('list'));
    }

    /**
     * 订单详情信息
     * @param $order_id
     * @return array
     * @throws \app\common\exception\BaseException
     * @throws \think\exception\DbException
     */
    public function detail($order_id)
    {
        // 订单详情
        $order = OrderModel::getUserOrderDetail($order_id, $this->user['user_id']);

        // 处理快递公司
        $expressData  = [];
        $tempExpressData  = [];
        $expressIds   = explode(',', $order['express_id']);
        $expressNos   = explode(',', $order['express_no']);
        if(isset($expressIds[0]) && $expressIds[0]) {
            foreach($expressIds as $key => $expressId) {
                $expressInfo = ExpressModel::detail($expressId);
                $temp['express_id']   = $expressInfo['express_id'];
                $temp['express_name'] = $expressInfo['express_name'];
                $temp['express_no']   = isset($expressNos[$key]) ? $expressNos[$key] : '';
                array_push($expressData, $temp);
            }
        }
        $expressData = array_unique($expressData, SORT_REGULAR);
        if($expressData && is_array($expressData)) {
            foreach($expressData as $val) {
                array_push($tempExpressData, $val);
            }
        } else {
            $tempExpressData  = [];
        }
        $order['express_list'] = $tempExpressData;

        // 该订单是否允许申请售后
        $order['isAllowRefund'] = $order->isAllowRefund();
        return $this->renderSuccess(compact('order'));
    }

    /**
     * 获取物流信息
     * @param $order_id
     * @return array
     * @throws \app\common\exception\BaseException
     * @throws \think\exception\DbException
     */
    public function express($express_id, $express_no = '')
    {
        // 订单信息
        // $order = OrderModel::getUserOrderDetail($order_id, $this->user['user_id']);
        // if (!$order['express_no']) {
        //     return $this->renderError('没有物流信息');
        // }
        // 获取物流信息
        /* @var \app\store\model\Express $model */
        // $model = $order['express'];
        $model = new ExpressModel;
        $item = ExpressModel::detail($express_id);
        $express = $model->dynamic($item['express_name'], $item['express_code'], $express_no);
        if ($express === false) {
            return $this->renderError($model->getError());
        }
        return $this->renderSuccess(compact('express'));
    }

    /**
     * 取消订单
     * @param $order_id
     * @return array
     * @throws \Exception
     * @throws \app\common\exception\BaseException
     * @throws \think\exception\DbException
     */
    public function cancel($order_id)
    {
        $model = OrderModel::getUserOrderDetail($order_id, $this->user['user_id']);
        if ($model->cancel()) {
            return $this->renderSuccess($model->getError() ?: '订单取消成功');
        }
        return $this->renderError($model->getError() ?: '订单取消失败');
    }

    /**
     * 取消订单商品
     * @param $order_id
     * @param $goods_id
     * @param $goods_sku_id 如果传了goods_id和goods_sku_id表示取消单商品
     * @return array
     * @throws \Exception
     * @throws \app\common\exception\BaseException
     * @throws \think\exception\DbException
     */
    public function cancelGoods($order_id, $goods_id = 0, $goods_sku_id = 0) {
        $model = OrderModel::getUserOrderDetail($order_id, $this->user['user_id']);
        if ($model->cancelGoods($order_id, $goods_id, $goods_sku_id))
            return $this->renderSuccess($model->getError() ?: '取消成功');

        return $this->renderError($model->getError() ?: '取消失败');
    }

    /**
     * 确认收货
     * @param $order_id
     * @return array
     * @throws \app\common\exception\BaseException
     * @throws \think\exception\DbException
     */
    public function receipt($order_id)
    {
        $model = OrderModel::getUserOrderDetail($order_id, $this->user['user_id']);
        if ($model->receipt()) {
            return $this->renderSuccess();
        }
        return $this->renderError($model->getError());
    }

    /**
     * 确认商品收货
     * @param $order_id
     * @param $goods_id，多个商品请用|隔开
     * @return array
     * @throws \app\common\exception\BaseException
     * @throws \think\exception\DbException
     */
    public function receiptGoods($order_id, $goods_id)
    {
        $model = OrderModel::getUserOrderDetail($order_id, $this->user['user_id']);
        if ($model->receiptGoods($goods_id)) {
            return $this->renderSuccess();
        }
        return $this->renderError($model->getError());
    }

    /**
     * 立即支付
     * @param int $order_id 订单id
     * @param int $payType 支付方式
     * @return array
     * @throws \app\common\exception\BaseException
     * @throws \think\Exception
     * @throws \think\exception\DbException
     */
    public function pay($order_id, $payType = PayTypeEnum::WECHAT)
    {
        // 订单详情
        $model = OrderModel::getUserOrderDetail($order_id, $this->user['user_id']);
        // 判断商品状态、库存
        if (!$model->checkGoodsStatusFromOrder($model['goods'])) {
            return $this->renderError($model->getError());
        }
        $render = [
            'order_id' => $model['order_id'],   // 订单id
            'pay_type' => $payType,            // 支付方式
        ];
        if ($payType == PayTypeEnum::WECHAT) {
            $render['payment'] = $model->paymentByWechat($this->user);
        } elseif ($payType == PayTypeEnum::BALANCE) {
            if ($model->paymentByBalance($model['order_no'])) {
                return $this->renderSuccess($render, '支付成功');
            }
            return $this->renderError($model->getError() ?: '支付失败', $render);
        }
        return $this->renderSuccess($render);
    }

    /**
     * 获取订单核销二维码
     * @param $order_id
     * @return array
     * @throws \app\common\exception\BaseException
     * @throws \think\exception\DbException
     */
    public function extractQrcode($order_id, $goods_id = 0, $goods_sku_id = 0)
    {
        // 订单详情
        $order = OrderModel::getUserOrderDetail($order_id, $this->user['user_id']);
        // 判断是否为待核销订单
        if (!$order->checkExtractOrder($order)) {
            return $this->renderError($order->getError());
        }
        $Qrcode = new ExtractQRcode(
            $this->wxapp_id,
            $this->user,
            $order_id,
            OrderTypeEnum::MASTER
        );
        return $this->renderSuccess([
            'qrcode' => $Qrcode->getImage(),
        ]);
    }

    /**
     * 删除订单
     * @param $order_id
     * @return array
     * @throws \Exception
     * @throws \app\common\exception\BaseException
     * @throws \think\exception\DbException
     */
    public function delete($order_id) {
        $model = OrderModel::getUserOrderDetail($order_id, $this->user['user_id']);
        if ($model->delete()) {
            return $this->renderSuccess($model->getError() ?: '订单删除成功');
        }
        return $this->renderError($model->getError() ?: '订单删除失败');
    }
}
